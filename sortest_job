

#include<bits/stdc++.h>

using namespace std;


struct info1
{
    int ari;
    int id;
    int ct;
    char pro;


};


struct info
{
    int ari;
    int id;
    int ct;
    char pro;


    bool operator<(const info &other) const
    {
        if (ct == other.ct)
        {

            return ari > other.ari;

        }

        return ct > other.ct;
    }


};




int main()
{

    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);




    int n;

    cin >> n;

    int ari[n+1], ct[n+1];

    char pro[n+1];

    priority_queue<info> q;

    queue<info1>proceess;

    for(int i = 1; i<=n; i++)
    {

        cin >> pro[i] >>  ari[i] >> ct[i];

        q.push({ari[i], i, ct[i], pro[i]});

    }


    vector<int>vec[200];
    vector<int>vec1[200];

    vector<pair<char,int>>gantt;

    int tq = 2, x = 2, y = 1, pre = 0;

    int curr_time = 0, com = 0;


    proceess.push({q.top().ari, q.top().id, q.top().ct, q.top().pro});

    q.pop();



    while(com < n)
    {


        if(!proceess.empty())
        {

            info1 qq = proceess.front();

            int aa = qq.ari;

            int cc = qq.ct;

            char pp = qq.pro;
            int id = qq.id;


            curr_time += cc;

            ///  cout <<" "<<pp<< " "<<curr_time<<" ";

            vec[pp].push_back(curr_time);


            vec1[pp].push_back(pre);


            proceess.pop();


             com++;

            /// cout << pp << " "<< curr_time << " ";


            gantt.push_back({pp, curr_time});

            while(!q.empty() && (curr_time >= q.top().ari))
            {


                proceess.push({q.top().ari, q.top().id, q.top().ct, q.top().pro});

                q.pop();


            }


        }
        else
        {


            curr_time++;

            while(!q.empty() && (curr_time >= q.top().ari))
            {


                proceess.push({q.top().ari, q.top().id, q.top().ct, q.top().pro});

                q.pop();


            }



        }


        pre = curr_time;



    }


    int turn_around_time[200];
    int start_time[200];
    int waiting_time[200];

    int response_time[200];

    int att=0, awt= 0, art = 0;



    for(int i = 1; i<=n; i++)
    {
        turn_around_time[pro[i]] = vec[pro[i]].back() - ari[i];

        waiting_time[pro[i]] = turn_around_time[pro[i]] - ct[i];

        response_time[pro[i]] = vec1[pro[i]].back() - ari[i];

        att +=   turn_around_time[pro[i]];

        awt += waiting_time[pro[i]];

        art +=response_time[pro[i]];

    }




    cout << "\n";

    cout << "process "<<"arrival_time "<<"complete time "<< "priority "<<"com_t      " << "TT       "<< "WT     "<< "first         "<<"rt "<<endl;

    for(int i = 1; i<=n; i++)
    {


        cout << pro[i] << "           "<<ari[i] << "             "<< ct[i] << "                  "<<vec[pro[i]].back()<<"        "
             << turn_around_time[pro[i]] << "       "<<waiting_time[pro[i]] << "        "<<vec1[pro[i]].back()<< "           "<<response_time[pro[i]]<<endl;



    }


    cout << "\n";

    cout << " gantt "<<endl;

    cout << 0 <<" ";

    for(auto x: gantt)
    {

        cout << x.first <<" "<<x.second<<" ";

    }

    cout << "\n";



    cout << " ATT "<<att/n<<endl;
    cout << " AWT "<<awt/n<<endl;
    cout << " art "<<art/n<<endl;


}
